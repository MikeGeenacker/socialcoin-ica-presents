#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('ica-presents-game:server');
var http = require('http');
var Eureca = require('eureca.io');
const multichain = require("multichain-node")({
    port: 7348,
    host: '136.144.155.184',
    user: "multichainrpc",
    pass: "uPc6civWyGanmrmAgn3Tn9pPgYR3noMQt9nPMun9GeD"
});

var eurecaServer = new Eureca.Server();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

eurecaServer.attach(server);


eurecaServer.exports.sendCoins = function(address, quantity) {
    // TODO, de daadwerkelijke call maken, return info kan niet geloof ik vanwege callbacks maar gewone functies kunnen. En versturen vereist toch geen reactie
    multichain.sendAssetFrom({from: '1BGsLpR4B8AjJV9ox1kpinLThaNoZwAtdC83mf', to:'1T4ip6sfhjHcBDRcWKEcoCqZZWKUpcZTM4KPH4', asset: 'SocialCoin', qty:  quantity},(err)=>{
      if(err) console.log(err);
    });
    console.log("verzoek tot coins verzenden binne gekregen van client");
    return "coins sent";
    //multichain.sendasset ofzo
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
